How do you make strings?


***'Single Quotes'
"Double Quotes"
"""Multiline Strings"""
***char str[] = "String";
char* str = 'This is string';
***new String("String!")
"String!"
***set obj-string to "string!"
display obj-string


What is the largest integer in python can generate?


***Infinity (until computer is out of memory)
***2^32
***2^64
***MAX_INT


True or False: It is possible to have imaginary numbers in python?


***True
***False


How do you represent floating point numbers?


***3.14
***3.14f
***3.14lf
***3.14d


What do you call joining strings together and how do you do it?


***Concatenation, you do "beginning of string" + "end of string"
***String Copy, you do strcpy("first string", "second string")
***String Building, you make a StringBuilder object and use the append method
***Concatenation, and you do "first string".concat("second string")


Which of these will cause the program to crash?


***raise Exception
***
try:
	raise Exception
except:
	pass
***
if True:
	print("hi")
else:
	print(1/0)


When you do concatenation, you always get a copy of the original sequence.
Always.


***True
***False


Which of these are expressions?


***x == 5
***x = 5
***x += 5
***for x in range(5):
    print(x)


Assume we have a list called xs with values [1,2,3,4]. Which of these is NOT a
way to update xs so it becomes [4, 2, 3, 4]?


***xs = [4, 2, 3, 4]
***xs[:] = [4, 2, 3, 4]
***xs[0] = 4
***xs[0] = xs[3]


What is the proper range call that can generate the following list?
[0, 2, 4, 6, 8, 10]


***range(0, 11, 2)
***range(11, 2)
***range(12, -1, -2)


Consider the following definitions:

    tup = ((), [], ("bob", 90), (23, "duck"))
    xs = [1, 2, (3,), [7, 8, 9], 10+11, 12, "yes", 14, "15"]
    string = "32 doggies"

What is the value of the following?:
    xs[4]


***21
***[7, 8, 9]
***7
***10


Consider the following definitions:

    tup = ((), [], ("bob", 90), (23, "duck"))
    xs = [1, 2, (3,), [7, 8, 9], 10+11, 12, "yes", 14, "15"]
    string = "32 doggies"

What is the value of the following?:
    tup[1:3][1][-1]


***90
***("bob", 90)
***"bob"
***23
***"duck"


Consider the following definitions:

    tup = ((), [], ("bob", 90), (23, "duck"))
    xs = [1, 2, (3,), [7, 8, 9], 10+11, 12, "yes", 14, "15"]
    string = "32 doggies"

What is the value of the following?:
    tup[xs[1]][0]


***"bob"
***Exception!
***[2]
***2
***("bob", 90)


You have an xs = [1, 2, ("rubiks", "cube")].
What is the type of the following:
    xs[0:3]


***List
***Int
***Float
***Set


You have an xs = [1, 2, ("rubiks", "cube")].
What is the type of the following:
    xs[0]


***Int
***Tuple
***List
***size_t


You have an xs = [1, 2, ("rubiks", "cube")].
What is the type of the following:
    xs[len(xs[:][-1][:])][:]


***Tuple
***String
***List
***Int


What happens when you do print("4 = " + 4)?


***Exception
***it prints "4 = 4"
***it prints "8"
***it prints "4"


Which of these are proper ways of importing math and using the sqrt function.


***import math; math.sqrt()
-or-
from math import sqrt; sqrt()
***import math; sqrt()
-or-
from math import sqrt; sqrt()
***from sqrt import math; math.sqrt()
-or-
import sqrt; sqrt()


What does this do?
x, y, z = 1, 2, "hello"


***Assigns x to 1, y to 2, and z to "hello"
***Exception!
***Assigns x to (1, 2, "hello"), y to (2, "hello") and z to ("hello",)


True or False: Python obeys PEMDAS


***True
***False


True or False: Strings and Tuples are immutable.


***True
***False


What does it mean when an object is immutable?


***The object is unable to be changed once set.
***The object is able to be modified once s et.
***It means you can turn it to gold.
***It doesn't mean you can't modify it.


Assume that the following happened:
	xs = [1, 2, 3]
	ys = xs
	xs[0] = 3
	print(ys == xs)
	print(xs)
	print(ys)
What is the ouput?


***True
[3, 2, 3]
[3, 2, 3]
***False
[3, 2, 3]
[1, 2, 3]
***True
[1, 2, 3]
[1, 2, 3]
***False
[1, 2, 3]
[3, 2, 3]


How do you make a tuple with the value of "cat" in it?


***("cat",)
***("cat")
***"cat"
***("cat", ())


How do you use set membership to check if 2 is a member of xs?


***2 in xs
***xs in 2
***2 == xs
***xs.contain(2)
